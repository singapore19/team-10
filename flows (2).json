[{"id":"5db46688.6c18e8","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"dd1bfb6b.f422a8","type":"function","z":"5db46688.6c18e8","name":"Start","func":"msg.payload.options = {parse_mode : \"Markdown\"};\nmsg.payload.content = \"Hello! Nice to meet you! I'm the Food IC and I'll be assisting you on food ordering for the next few weeks! ðŸ˜Š Let's start off by typing /register to befriend me. ðŸ˜‹\";\nreturn msg;\n\n","outputs":1,"noerr":0,"x":301,"y":194,"wires":[["28c52464.f78c3c"]]},{"id":"efe4cb23.635e88","type":"function","z":"5db46688.6c18e8","name":"Help","func":"msg.payload.options = {parse_mode : \"Markdown\"};\nmsg.payload.content = \"Hey there! I will provide you with all your food details every Monday 12 Noon.\\r\\nYou can manually check with /check as well! Once you're ready to order, just type /order to order! ðŸ˜Š\\r\\n\\r\\n *Ways to summon me*\\r\\n /check - Check your food count & menu for the upcoming lesson ðŸ˜‹\\r\\n /register - Signup for your respective class\\r\\n /order - Place your food order\\r\\n /slot - Send you student for makeup!\\r\\n /sub - Check whose subbing in and out of your classes\\r\\n normal (N), vegetarian (V), no-beef (NB), Halal (H)\\r\\n /buy - Guide on where to buy food if ordered food is not enough\\r\\n\\r\\nTo check student diets, type /slot, choose any lesson and class and you will see each student's dietary type!\";\nreturn msg;\n\n","outputs":1,"noerr":0,"x":301,"y":254,"wires":[["41aca6a9.6f8a38"]]},{"id":"e49f4dac.dc29f","type":"function","z":"5db46688.6c18e8","name":"Buy","func":"msg.payload.options = {parse_mode : \"Markdown\"};\nmsg.payload.content = \"Hey! The budget for each headcount is $8 and below. (inclusive of delivery charges)\\r\\nPlease inform @SherylTqs before purchasing! Remember to get a receipt and send it to him to claim $$. ðŸ¤‘\\r\\n\\r\\n*HQ Special Food List*\\r\\n*Breakfast and Tea:* ðŸ˜‹\\r\\nMacdonald (ARC): Corn, Red Rice Porridge (Vegan) \\r\\nFruit Store (ARC): Fruits (Vegan) \\r\\n\\r\\n*Lunch and Dinner:* ðŸ˜‹\\r\\nQQRice (ARC): Vegetarian Bento Set, Sesame mushroom rice (Vegan) \\r\\nBurger King (ARC): Veggie Burger (Vegetarian)\\r\\n\\r\\n*SMU Special Food List*\\r\\n*All Meals: ðŸŒ¿*\\r\\nSubway: Veggie Delite (Vegan) \\r\\n\\r\\n*Breakfast,Lunch and Tea: ðŸŒ¿*\\r\\nMr Bean: Soy Porridge (Vegetarian Tofu and Peanuts) (Vegetarian)\\r\\n\\r\\n*Definitions:*\\r\\nStrict vegetarian: No meat, garlic, shoots and onion\\r\\nVegetarian: No meat but can eat eggs\\r\\nVegan: No Meat, dairy and egg\";\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":301,"y":134,"wires":[["d041cb72.80b868"]]},{"id":"be4dad6a.ae0f1","type":"telegram command","z":"5db46688.6c18e8","name":"","command":"/start","bot":"55a26b72.c8af14","strict":false,"x":161,"y":194,"wires":[["dd1bfb6b.f422a8"],[]]},{"id":"27e412fb.45dade","type":"telegram command","z":"5db46688.6c18e8","name":"","command":"/help","bot":"55a26b72.c8af14","strict":false,"x":161,"y":254,"wires":[["efe4cb23.635e88"],[]]},{"id":"3d311349.f48eec","type":"telegram command","z":"5db46688.6c18e8","name":"","command":"/buy","bot":"55a26b72.c8af14","strict":false,"x":123,"y":134,"wires":[["e49f4dac.dc29f"],[]]},{"id":"28c52464.f78c3c","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":451,"y":194,"wires":[[]]},{"id":"41aca6a9.6f8a38","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":451,"y":254,"wires":[[]]},{"id":"d041cb72.80b868","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":451,"y":134,"wires":[[]]},{"id":"946895aa.ff1c38","type":"function","z":"5db46688.6c18e8","name":"SET TO OWN ID","func":"msg.payload.type = \"message\"\nmsg.payload.chatId = 299473483\nmsg.payload.options = {parse_mode : \"Markdown\"};\nmsg.payload.content = '*Error encountered!\\r\\n' + msg.error.message + '\\r\\nFrom ' + msg.error.source.name + '*'\n\nreturn msg;","outputs":1,"noerr":0,"x":890,"y":128,"wires":[["f42d0bd5.ff2cf8"]]},{"id":"3029a06b.12ed2","type":"debug","z":"5db46688.6c18e8","name":"Error Log","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":830,"y":268,"wires":[]},{"id":"5f07a1f7.2e849","type":"comment","z":"5db46688.6c18e8","name":"Catch All Error","info":"","x":720,"y":108,"wires":[]},{"id":"41d3085e.b8a978","type":"catch","z":"5db46688.6c18e8","name":"","scope":null,"uncaught":false,"x":690,"y":148,"wires":[["3029a06b.12ed2","946895aa.ff1c38"]]},{"id":"f42d0bd5.ff2cf8","type":"telegram sender","z":"5db46688.6c18e8","name":"Send to choopa","bot":"55a26b72.c8af14","x":1070,"y":188,"wires":[[]]},{"id":"889715cb.7ee7e8","type":"function","z":"5db46688.6c18e8","name":"No. of TA","func":"//context.global.keyboard2 = {pending:true};\n\nvar opts = {\n    reply_to_message_id: msg.payload.messageId,\n    reply_markup: JSON.stringify({\n        \"inline_keyboard\": [[\n            {\n                \"text\":\"3\",\n                \"callback_data\": \"3\"\n                \n            },\n            {\n                \"text\":\"4\",\n                \"callback_data\": \"4\"\n            },\n            {\n                \"text\":\"5\",\n                \"callback_data\": \"5\"\n                \n            },\n            {\n                \"text\":\"6\",\n                \"callback_data\": \"6\"\n            }            \n            \n            ]]\n        \n        \n    })\n    \n}\nmsg.payload.content = 'How many TAs and Instructor does your class have?';\nmsg.payload.options = opts;\nreturn [msg];\n ","outputs":1,"noerr":0,"x":337,"y":463,"wires":[["d9e54fa4.38039"]]},{"id":"6e51ad82.c74444","type":"telegram command","z":"5db46688.6c18e8","name":"","command":"/register","bot":"55a26b72.c8af14","strict":false,"x":113,"y":455,"wires":[["889715cb.7ee7e8"],[]]},{"id":"d9e54fa4.38039","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":495,"y":466,"wires":[[]]},{"id":"a33706fe.f89498","type":"debug","z":"5db46688.6c18e8","name":"Makeup Usage Log","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":739,"y":606,"wires":[]},{"id":"59fee541.83fc7c","type":"function","z":"5db46688.6c18e8","name":"send success msg to CTA and TargetCTA","func":"var moment = global.get('moment')\n\nif (msg.payload['status'] == \"success\"){\n    var output = []\n        var opts = {\n        chat_id : msg.originalMessage.from.id,\n        message_id : msg.originalMessage.message.message_id,        \n        reply_markup: JSON.stringify({\n            \"inline_keyboard\": []\n        })\n    }\n    studentnameclass = msg.originalMessage.message.text\n    msg.payload.chatId = msg.originalMessage.from.id\n    msg.payload.content = \"Your makeup has been confirmed! ðŸ€„\\r\\nSent \"+ studentnameclass.slice(30,-1) + '\\r\\nTimestamp: ' + moment().add(8, 'hour').format('D MMM YY, h:mma').toString()\n    msg.payload.type = 'editMessageText'\n    msg.payload.options = opts;\n    var cloneOfA = JSON.parse(JSON.stringify(msg)); //Idk why need parse to JSON, but oh well!\n    output.push(cloneOfA)\n    //Alert target class CTA\n    taname = studentnameclass.slice(studentnameclass.indexOf(\"(\")+1,studentnameclass.indexOf(\")\"))\n    var telegramusers = global.get(\"telegramusers\");\n    for (var i=0;i<telegramusers.length;i++) {\n        var chatidd = telegramusers[i].chatId.toString()\n        if (taname===telegramusers[i].name && !chatidd.includes(\"555555\")) {  //Check if Name aligns with the telegramuser dict, cannot have duplicate names*\n            tachatid = parseInt(telegramusers[i].chatId)\n        }\n        if (parseInt(msg.originalMessage.from.id)===parseInt(telegramusers[i].chatId)) {\n            originaltaname = telegramusers[i].name\n        }        \n    }\n    var msg;\n    msg.payload.chatId = tachatid\n    msg.payload.content = \"*Please take note!* \" + originaltaname + \" sent \"+ studentnameclass.slice(30,studentnameclass.indexOf(\"(\")) + '\\r\\nTimestamp: ' + moment().add(8, 'hour').format('D MMM YY, h:mma').toString()\n    msg.payload.type = 'message'\n    msg.payload.options = {parse_mode: \"Markdown\"};\n    \n    var cloneOfA = JSON.parse(JSON.stringify(msg));\n    output.push(cloneOfA)\n    return [output];\n    \n}else{\n            var opts = {\n        chat_id : msg.originalMessage.from.id,\n        message_id : msg.originalMessage.message.message_id,        \n        reply_markup: JSON.stringify({\n            \"inline_keyboard\": []\n        })\n    }\n    msg.payload.content = \"Oh No! It failed! Please contact @choopatroopa! ðŸ¤’\"\n    msg.payload.type = 'editMessageText'\n    msg.payload.options = opts;\n    msg.payload.chatId = msg.originalMessage.from.id\n    \n    return [msg];\n}\n\n","outputs":2,"noerr":0,"x":809,"y":646,"wires":[["9179eb0b.b17c28","abfa60e2.f6407","bf22faa2.69d0e8"],["9179eb0b.b17c28"]]},{"id":"65d7a93e.d69838","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":769,"y":686,"wires":[[]]},{"id":"d2cf31dd.f9f82","type":"http request","z":"5db46688.6c18e8","name":"","method":"POST","ret":"obj","url":"https://api.hackwagon.com/v1/instructors/attendance/change","tls":"","x":539,"y":646,"wires":[["a33706fe.f89498","59fee541.83fc7c"]]},{"id":"4d11e7f4.c53768","type":"function","z":"5db46688.6c18e8","name":"Class Select","func":"//context.global.keyboard = {pending : true };\nmsg.payload.type = 'editMessageText'\nvar classlist = global.get(\"classlist\");\nclasses = [[{\"text\":'Cancel', \"callback_data\":\"Cancel\"}]]\nfor (var k = 0; k <= classlist.length; k++) {\n    if(k==(classlist.length)){\n        classes.push([{\"text\":'Cancel', \"callback_data\":\"Cancel\"}])\n    }else{\n        var callbackdata = \"selectedclass-\" + classlist[k]\n        classes.push([{\"text\":classlist[k], \"callback_data\":callbackdata}])\n    }\n    \n}\n\nvar opts = {\n    chat_id : msg.payload.chatId,\n    message_id : msg.payload.messageId,\n    reply_markup: JSON.stringify({\n        \n        \"inline_keyboard\": classes\n    })\n};\n\nmsg.payload.content = 'Choose your class! ðŸ¤—';\nmsg.payload.options = opts;\n\nreturn [msg];\n\n\n// context.global.keyboard = {pending : true };\n// msg.payload.type = \"message\";\n// var classlist = global.get(\"classlist\");\n// classes = [['Cancel']]\n// for (var k = 0; k <= classlist.length; k++) {\n//     if(k==(classlist.length)){\n//         classes.push(['Cancel'])\n//     }else{\n//         classes.push([classlist[k]])\n//     }\n    \n// }\n\n// var opts = {\n//     reply_to_msg_id: msg.payload.messageId,\n//     reply_markup: JSON.stringify({\n//         keyboard:  classes,\n            \n//     'resize_keyboard' : true,\n//     'one_time_keyboard' : true\n//     })\n// };","outputs":1,"noerr":0,"x":539,"y":686,"wires":[["65d7a93e.d69838"]]},{"id":"3057975f.e1c578","type":"function","z":"5db46688.6c18e8","name":"Sticker 2","func":"// var stickerpack = global.get(\"stickerpack\");\nvar stickerpack = ['CAADAgADCAADwDZPE29sJgveGptpFgQ','CAADAgADFAADr8ZRGgu7XTT4sVnxFgQ']\nvar rand = stickerpack[Math.floor(Math.random() * stickerpack.length)];\n\nmsg.payload.content = rand;\nmsg.payload.type = 'sticker';\nreturn msg;","outputs":1,"noerr":0,"x":609,"y":726,"wires":[["9e0217c6.eab168"]]},{"id":"9e0217c6.eab168","type":"telegram sender","z":"5db46688.6c18e8","name":"Send response","bot":"55a26b72.c8af14","x":769,"y":786,"wires":[[]]},{"id":"2246a719.049a68","type":"function","z":"5db46688.6c18e8","name":"Register User","func":"var message = msg.payload.content;\nvar opts = {\nchat_id : msg.payload.chatId,\nmessage_id : msg.payload.messageId,        \nreply_markup: JSON.stringify({\n    \"inline_keyboard\": []\n})\n}\nif (message.split(\"-\")[0] == 'selectedclass'){\n       // Get the user settings stored in global\n    var telegramusers = global.get(\"telegramusers\");\n    var tacount = global.get(\"tacount\");\n    var cohort = global.get(\"cohortnow\")\n    // Create the new user object and maintain it based on the data received\n    var classId = message.split(\"-\")[1]\n    var newuser = {\n        chatId: msg.payload.chatId,\n        name: msg.originalMessage.from.first_name,\n        accesslevel: 0,\n        loglevel: 10,\n        logmute: 0,\n        blocked: true,\n        classid: classId,\n        taincount: parseInt(tacount),\n        cohort: parseInt(cohort)\n    };        \n\n    var creationmsg = \"Thank you for registering, \"+msg.originalMessage.from.first_name+\"\\r\\nPlease confirm that you are registered to \"+classId+\" with \"+tacount+\" TA/Instructor!\"+global.get(\"choopamsg\")\n            \n    if (telegramusers===undefined) {\n        // Create an empty array if it does not exist yet\n        telegramusers = [];\n        telegramusers.push(newuser);\n        global.set(\"telegramusers\",telegramusers);\n        msg.payload.content = creationmsg\n        msg.payload.type = 'editMessageText'\n        msg.payload.options = opts;\n        return [msg,null,null];\n    } else {\n        // Check if this user is already created\n        var duplicate = false;\n        for (var i=0;i<telegramusers.length;i++) {\n            if (msg.payload.chatId===telegramusers[i].chatId) {\n                duplicate = true;\n                break;\n            }\n        }\n        if (duplicate) {\n            // This user is already registered, return in the second port\n            msg.payload.content = \"You are already registered! Don't fool me! ðŸ˜¡\"\n            msg.payload.type = 'editMessageText'\n            msg.payload.options = opts;\n            return [null,msg,null];\n        } else {\n            // This is a new user, save and return in the first port\n            telegramusers.push(newuser);\n            global.set(\"telegramusers\",telegramusers);\n            msg.payload.content = creationmsg\n            msg.payload.type = 'editMessageText'\n            msg.payload.options = opts;\n            return [msg,null,null];\n            \n        }\n    }\n    \n    }else if(message=='Cancel'){\n\n        msg.payload.content = \"Okay..byebye..ðŸ˜­\"\n        msg.payload.type = 'editMessageText'\n        msg.payload.options = opts;\n        return [null,null,msg];\n        \n    }","outputs":3,"noerr":0,"x":319,"y":726,"wires":[["9e0217c6.eab168","3057975f.e1c578"],["9e0217c6.eab168","3057975f.e1c578"],["9e0217c6.eab168","3057975f.e1c578"]]},{"id":"99c46e4b.673d","type":"function","z":"5db46688.6c18e8","name":"Set TA count global","func":"//var show_alert = true;\nvar message = msg.payload.content;\nif ([\"3\",\"4\",\"5\",\"6\"].includes(message)){\n    var tacount = message;\n    global.set(\"tacount\",tacount);\n    //msg.payload.options = show_alert;\n    return [msg];\n}\n\n\n\n","outputs":1,"noerr":0,"x":339,"y":646,"wires":[["4d11e7f4.c53768"]]},{"id":"9f67844a.2aba68","type":"function","z":"5db46688.6c18e8","name":"gotit","func":"var message = msg.payload.content;\nif (message.split(\"-\")[0] == 'gotit'){  // tag-targetclass-ownclass-lessonno-userid\n    var lessonno = parseInt(message.split(\"-\")[3])-1 //Api takes in 0-6 Lesson\n    var sub = message.split(\"-\")[1] + '-' + lessonno.toString() \n    msg.payload = {\n    \"userId\": message.split(\"-\")[4],\n    \"classId\" : message.split(\"-\")[2],\n    \"lessonIndex\" : lessonno,\n    \"status\" : \"substitute\",\n    \"substituteId\" : sub\n      }\n      \n      \n    msg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"X-API-Key\": \"sk_pEEZXkt9Z5LzBhegYjaTN7xC\"\n    }\n    return msg;\n}\n","outputs":1,"noerr":0,"x":339,"y":586,"wires":[["d2cf31dd.f9f82"]]},{"id":"45cc9487.992f4c","type":"telegram event","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","event":"callback_query","autoanswer":false,"x":119,"y":606,"wires":[["99c46e4b.673d","2246a719.049a68","9f67844a.2aba68"]]},{"id":"abfa60e2.f6407","type":"debug","z":"5db46688.6c18e8","name":"Tester 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":1189,"y":546,"wires":[]},{"id":"bf22faa2.69d0e8","type":"file","z":"5db46688.6c18e8","name":"Write to Makeuplog.json","filename":"./data/makeuplog.json","appendNewline":true,"createDir":false,"overwriteFile":"false","x":1239,"y":606,"wires":[[]]},{"id":"9179eb0b.b17c28","type":"telegram sender","z":"5db46688.6c18e8","name":"","bot":"55a26b72.c8af14","x":1349,"y":686,"wires":[[]]},{"id":"55a26b72.c8af14","type":"telegram bot","z":"5db46688.6c18e8","botname":"MWS Driver","usernames":"choopatroopa,tkhang1999,LiangBY,timothysoh,shchye,Han_Qing","chatids":"","baseapiurl":"","updatemode":"polling","pollinterval":"300","usesocks":false,"sockshost":"","socksport":"6667","socksusername":"anonymous","sockspassword":"","bothost":"","localbotport":"8443","publicbotport":"8443","privatekey":"","certificate":"","useselfsignedcertificate":false,"verboselogging":false}]